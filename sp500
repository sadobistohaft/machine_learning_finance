#!/usr/bin/env python
# coding: utf-8

# In[52]:


import bs4 as bs
import pickle
import requests
import datetime as dt
import os
import pandas as pd
import numpy as np
import pandas_datareader.data as web
import matplotlib.pyplot as plt
from matplotlib import style
import matplotlib
matplotlib.use('nbagg')


# In[2]:


os.getcwd()


# In[3]:


def save_sp_500():
    resp = requests.get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs.BeautifulSoup(resp.text, 'lxml')
    table = soup.find('table', {'class' :'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text
        ticker = ticker[:-1]
        tickers.append(ticker)
        
    with open("sp500tickers.pickle", "wb") as f:
        pickle.dump(tickers,f)
      
    return tickers


# In[4]:


save_sp_500()


# In[5]:


def get_data_from_yahoo(reload_sp500 = False):
    if reload_sp500:
        tickers = save_sp_500()
    else:
        with open("sp500tickers.pickle", "rb") as f:
            tickers = pickle.load(f)
            
    if not os.path.exists('stock_dfs'):
        os.makedirs('stock_dfs')
        
    start = dt.datetime(2017,1,1)
    end = dt.datetime(2019,12,31)
    
    for ticker in tickers:
        print(ticker)
        if not os.path.exists('stock_dfs/{}.csv'.format(ticker)):
            try:
                df = web.DataReader(ticker, 'yahoo', start, end)
                df.to_csv('stock_dfs/{}.csv'.format(ticker))
            except KeyError:
                pass
        else:
            print('already have {}'.format(ticker))


# In[6]:


get_data_from_yahoo()


# In[15]:


def compile_data():
    with open("sp500tickers.pickle", "rb") as f:
        tickers = pickle.load(f)
    
    main_df = pd.DataFrame()
    
    for count, ticker in enumerate(tickers):
        try:
            df = pd.read_csv("stock_dfs/{}.csv".format(ticker))
            df.set_index('Date', inplace = True)
            df.rename(columns = {"Adj Close": ticker}, inplace = True)
            df.drop(['Open' , 'High', "Low", "Close", "Volume"], 1, inplace = True)
        
            if main_df.empty:
                main_df = df
            else:
                main_df = main_df.join(df, how = "outer")
            
            if count % 10 ==0:
                print(count)
        except FileNotFoundError:
            pass
    print(main_df.head())
    main_df.to_csv("sp500jointclose")


# In[16]:


compile_data()


# In[81]:


def visualize_data():
    df1 = pd.read_csv("sp500jointclose")
#    df1['AAPL'].plot()
#    plt.show()
    df1_corr = df1.corr()
    data = df1_corr.values
    fig = plt.figure(figsize = (30,15))
    ax = fig.add_subplot()
    heatmap = ax.pcolor(data, cmap= plt.cm.RdYlGn)
    fig.colorbar(heatmap)
    ax.set_xticks(np.arange(data.shape[1])+ 1, minor = False)
    ax.set_yticks(np.arange(data.shape[0])+ 1, minor = False)
    ax.invert_yaxis()
    ax.xaxis.tick_top()
    columns_label = df1_corr.columns
    row_labels = df1_corr.index
    ax.set_xticklabels(columns_label)
    ax.set_yticklabels(row_labels)
    plt.xticks(rotation= 90)
    heatmap.set_clim(-1, 1)
    plt.tight_layout()
    
    plt.show()


# In[82]:


visualize_data()


# In[ ]:




